#!/usr/bin/env bash
##==============================================================================
##------------------------------------------------------------------------------




#-------------------------------------------------------------------------------
# Meta
#-------------------------------------------------------------------------------

	readonly script_pid=$$
	readonly script_author="qodeninja"
	readonly script_id="wlux-setup"
	readonly script_prefix="wlux"
	readonly script_rc_file=".wluxrc"
	readonly script_log_file="$script_id.log"

#-------------------------------------------------------------------------------
# Term
#-------------------------------------------------------------------------------


	red=$(tput setaf 1)
	green=$(tput setaf 2)
	blue=$(tput setaf 12)
	orange=$(tput setaf 214)
	white=$(tput setaf 248)
	white2=$(tput setaf 15)
	x=$(tput sgr0)
	eol="$(tput el)"
	bld="$(tput bold)"
	line="##---------------$nl"
	tab=$'\t'
	nl=$'\n'
	delta="${orange}\xE2\x96\xB3"
	pass="${green}\xE2\x9C\x93"
	fail="${red}\xE2\x9C\x97"
	lambda="\xCE\xBB"

#-------------------------------------------------------------------------------
# Utils
#-------------------------------------------------------------------------------

	function __printf(){
		local text color prefix
		text=${1:-}; color=${2:-white2}; prefix=${!3:-};
		[ $opt_quiet -eq 1 ] && [ -n "$text" ] && printf "${prefix}${!color}%b${x}" "${text}" 1>&2 || :
	}

	function confirm(){
		local ret;ret=1
		__printf "${1}? > " "white2" #:-Are you sure ?
		[ $opt_yes -eq 0 ] && __printf "${bld}${green}auto yes${x}\n" && return 0;
		[[ -f ${BASH_SOURCE} ]] && src='/dev/stdin' || src='/dev/tty'
		while read -r -n 1 -s answer < $src; do
			[ $? -eq 1 ] && exit 1;
			if [[ $answer = [YyNn10tf+\-q] ]]; then
				[[ $answer = [Yyt1+] ]] && __printf "${bld}${green}yes${x}" && ret=0 || :
				[[ $answer = [Nnf0\-] ]] && __printf "${bld}${red}no${x}" && ret=1 || :
				[[ $answer = [q] ]] && __printf "\n" && exit 1 || :
				break
			fi
		done
		__printf "\n"
		return $ret
	}

	function __sleep(){
		[ $opt_yes -eq 1 ] && sleep 1 || :
	}

	function error(){ local text=${1:-}; __printf " $text\n" "fail"; }
	function warn(){ local text=${1:-}; __printf " $text$x\n" "delta";  }
	function info(){ local text=${1:-}; [ $opt_debug -eq 0 ] && __printf "$lambda $text\n" "blue"; }

	function die(){ __printf "\n$fail $1 "; exit 1; }


#-------------------------------------------------------------------------------
# SED Utils
#-------------------------------------------------------------------------------

	function file_marker(){
		local delim dst dend mode="$1" lbl="$2" as="$3"
		dst='#';dend='#';
		[ "$as" = "js" ] && { dst='\/\*'; dend='\*\/'; }|| :
		[ "$mode" = "str" ] && str='str' || str='end'
		echo "${dst}----${block_lbl}:${str}----${dend}"
	}

	function file_add_block(){
		local newval="$1" src="$2" block_lbl="$3" delim="$4" match_st match_end data res ret=1
		match_st=$(file_marker "str" "${block_lbl}" "${delim}" )
		match_end=$(file_marker "end" "${block_lbl}" "${delim}" )
		res=$(file_find_block "$src" "$block_lbl" "${delim}" )
		ret=$?
		if [ $ret -gt 0 ]; then #nomatch ret=1
			data="$(cat <<-EOF
				${match_st}
				${newval}
				${match_end}
			EOF
			)";
			echo "$data" >> $src
			ret=$?
		else
			ret=1
		fi
		return $ret
	}

	function file_del_block(){
		local src="$1" block_lbl="$2" delim="$3" match_st match_end data res ret dst dend
		match_st=$(file_marker "str" "${block_lbl}" "${delim}" )
		match_end=$(file_marker "end" "${block_lbl}" "${delim}" )
		sed -i.bak "/${match_st}/,/${match_end}/d" "$src";ret=$?
		res=$(file_find_block "$src" "$block_lbl" "${delim}" );ret=$?
		[ $ret -gt 0 ] && ret=0 || ret=1
		rm -f "${src}.bak"
		return $ret
	}

	function file_find_block(){
		local src="$1" block_lbl="$2" delim="$3" match_st match_end data res ret=1
		match_st=$(file_marker "str" "${block_lbl}" "${delim}")
		match_end=$(file_marker "end" "${block_lbl}" "${delim}")
		res=$(sed -n "/${match_st}/,/${match_end}/p" "$src")
		[ -z "$res" ] && ret=1 || ret=0;
		echo "$res"
		return $ret;
	}

#-------------------------------------------------------------------------------
# Profile Linker
#-------------------------------------------------------------------------------

	function profile_link(){
		info "Linking profile..."
		local rc_file="$1" ret res data
		if [ -f "$rc_file" ]; then
			src="$LUX_BASH_PROFILE" #link to bashrc so vars are available to subshells?
			[ ! -f "$src" ] && touch "$src"
			lbl="$script_id"
			res=$(file_find_block "$src" "$lbl" ); ret=$?;

			if [ $ret -eq 1 ]; then
				data="$(cat <<-EOF
					${tab} if [ -f "$rc_file" ] ; then
					${tab}   source "$rc_file"
					${tab} else
					${tab}   [ -t 1 ] && { echo "\$(tput setaf 214)$script_rc_file is missing, fx link or unlink to fix ${x}";LUX_INSTALLED=1; } || :
					${tab} fi
				EOF
				)";
				res=$(file_add_block "$data" "$src" "$lbl" )
				ret=$?
			else
				warn "Profile already linked.";ret=0;
			fi

		else
			error "Profile doesnt exist @ $LUX_BASH_PROFILE"
			ret=1
		fi
		return $ret
	}

	function profile_unlink(){
		local rc_file="$1" src="$LUX_BASH_PROFILE" lbl="$script_id" ret res data
		[ -f "$rc_file" ] && rm -f "$rc_file" || :
		res=$(file_del_block "$src" "$lbl" ); ret=$?
		[ $ret -eq 0 ] && __printf "Conf file removed from $rc_file\n" "red" ||:
	}

#-------------------------------------------------------------------------------
# RC File
#-------------------------------------------------------------------------------

	function rc_file_str(){
		local data
		data+=""
		data="$(cat <<-EOF
			#!/usr/bin/bash
			${line}
			### wlux install generated config file $(date)
				export LUX_INSTALLED=0
				export LUX_PREFIX="$LUX_PREFIX"
				export LUX_BIN="$LUX_BIN"
				if [[ ! "\$PATH" =~ "\$LUX_BIN" ]]; then
					export PATH=\$PATH:\$LUX_BIN;
				fi
			${line}
		EOF
		)";
		echo "$data"
	}


	function rc_make(){
		local show src rc_str
		info "Saving $1 file..."
		src="$1"
		if [ -n $src ]; then
			rc_str="$(rc_file_str)"
			echo -e "$rc_str" > ${src}
		fi
		[ -f "${src}" ] && return 0 || return 1;
	}


	function rc_dump(){
		local src="$1"
		[ $opt_quiet -eq 0 ] && return 0;
		if [ -f "$src" ]; then
			echo $line${nl}
			cat "$src"
		else
			die "RC File doesnt exist. ($src)"
		fi
	}


#-------------------------------------------------------------------------------
# FX Util Helpers
#-------------------------------------------------------------------------------

	function fx_download(){
		local url=$1 target=$2 temp=$(mktemp /tmp/lux.XXXX)
		#info "Temp file is $TEMP"
		[ -f $target ] && { warn "File $target already exists"; return 0; } || :
		wget -q -nc -O $temp $url
		if [ -f "$temp" ]; then
			 [ -d "$LUX_BIN" ] && {
				cp "$temp" "$target"
				if confirm "Enable local execution of $(basename $target)"; then
					chmod +x "$target"
				else
					warn "Be sure to set execution permission on $targetÃŸ (chmod +x)"
				fi
				[ -f "$target" ] && return 0
			} || :
		else
			:
		fi
		return 1
	}


	function fx_dump(){
		local len arr i this flag newl
		[ $opt_quiet -eq 0 ] && return 0;
		newl="\n"
		vars=($(set | grep -E ^LUX_[^=]+=.* | cut -d "=" -f1))
		for this in "${vars[@]}"; do
			printf "$this = ${!this} $newl"
		done
	}


	function fx_vars(){
		if [ -n $LUX_PREFIX ]; then
			LUX_LIB="$LUX_PREFIX/lib/luxor"
			LUX_BIN="$LUX_PREFIX/bin/luxor" #bin should be linked in
			LUX_ETC="$LUX_PREFIX/etc/luxor"
			LUX_CONF_FILE="$LUX_ETC/luxor.conf"
			this_line="source \"$LUX_CONF_FILE\""
			REGEX_LINE="^[^#]*\b$this_line"
			return 1
		fi
		return 0
	}

	function create_dirs(){
		LUX_DIRS=($LUX_LIB $LUX_BIN $LUX_ETC);
		for this in "${LUX_DIRS[@]}"; do
			[ ! -d $this ] && { info "Creating Directory $this..."; mkdir -p $this; } || info "Directory $this already exists";
			if [ ! -w $this ]; then
				__printf "${red}Install directory [$this] is not writeable. Exiting.${x}\n";
				exit 1;
			fi
		done
	}

	function nuke_dirs(){
		info "Nuking Directories..."
		for this in "${LUX_DIRS[@]}"; do
			[ ! -d $this ] && warn "$this does not exist"
			[ -d $this ] && { if confirm "Force remove ${this} dir? (y/n)"; then rm -rf $this; fi } || :
			[ -d $this ] && die "Unable to remove directory [$this] please check permissions." || :
		done

	}

	function fx_unset(){
		info "Unsetting Vars..."
		if [ -n "$1" -o $opt_yes -eq 0 ] || confirm "Unset all LUXOR variables for the current shell? (y/n)"; then
			vars=($(set | grep -E ^LUX_[^=]+=.* | cut -d "=" -f1))
			for v in "${vars[@]}"; do
				warn "removing ${v}"
				unset "$v" 2> /dev/null
			done
			unset vars 2> /dev/null
		fi
	}

#-------------------------------------------------------------------------------
# FX API
#-------------------------------------------------------------------------------

	function api_options(){
		local this_dir

		[ "$0" != "-bash" ] && this_dir="$( cd "$(dirname "$0")" || exit; pwd -P)" \
												|| this_dir="$( cd "$(dirname "${BASH_SOURCE[0]}")" || exit; pwd -P)"

		#FX_ROOT_DIR="$( cd $this_dir && cd .. || exit; pwd -P)"
		#FX_BIN_DIR="$this_dir/bin"
		LUX_INSTALLED=1

		LUX_OPT_USER="/usr/local"
		LUX_OPT_HOME="$HOME/.local"

		opt_debug=1
		opt_quiet=1
		opt_yes=1
		opt_local=1
		opt_nuke=1
		opt_clean=1

		#TODO SWITCH TO NEW URL
		FX_UTIL_URL="https://git.io/fx-util"
		FX_SETUP_URL="https://git.io/fx-setup"

		LUX_SETUP_URL="https://git.io/wlux-setup"
		LUX_CLI_URL="https://git.io/wlux-cli"
		LUX_THMX_URL="https://git.io/wlux-thmx"
		LUX_APP_URL="https://git.io/wlux-app"

		[ -f "$HOME/.profile" ] && LUX_BASH_PROFILE="$HOME/.profile" || LUX_BASH_PROFILE="$HOME/.bash_profile"

		[[ "${@}" =~ "--quiet"  ]] && { opt_quiet=0; opt_yes=0; } || :
		[[ "${@}" =~ "--debug"  ]] && opt_debug=0 || :
		[[ "${@}" =~ "--system" ]] && { opt_local=0; LUX_PREFIX="/usr/local"; } || :
		[[ "${@}" =~ "--local"  ]] && { opt_local=1; LUX_PREFIX="$HOME/.local"; } || :
		#TODO add --custom prefix flag
		[[ "${@}" =~ "--nuke"   ]] && opt_nuke=0  || :
		[[ "${@}" =~ "--clean"  ]] && opt_clean=0 || :
		[[ "${@}" =~ "--yes"    ]] && opt_yes=0   || :

		list=($(find "$LUX_OPT_HOME" "$LUX_OPT_USER" -type f -name "luxor.conf"))
		len=${#list[@]};

		[ $len -gt 0 ] && source "${list[0]}" || info "Could not find local luxor.conf"
		[ $LUX_INSTALLED -eq 0 ] && fx_vars || :

		info "LUX_PREFIX defined? ($LUX_PREFIX)"
	}


	function api_uninstall(){
		api_nuke 0
		info "Refresh terminal to clear remaining FX vars"
	}


	function api_install(){
		if [ $LUX_INSTALLED -eq 0 ] && [ ! -z "$LUX_PREFIX" ]; then
			msg="LUX is already installed, attempt repair"
			[ $opt_clean -eq 0 ] && { LUX_PREFIX=; msg="Clean repair with unset prefix";  }
			if confirm "$msg (y/n=cancel)"; then
				info "Repairing..."
				__sleep
				api_clean 0
				[ $opt_quiet -eq 1 ] && clear || :
				api_options "${orig_args[@]}"
			else
				exit 0
			fi
		else
			info "Installing... ($LUX_PREFIX)"
			__sleep
		fi

		if [ -z "$LUX_PREFIX" ]; then
			warn "LUX_PREFIX not defined."
			if confirm "Install LUX for just the current user (y/n)"; then
				LUX_PREFIX="$LUX_OPT_HOME"
			else
				LUX_PREFIX="$LUX_OPT_USER"
			fi
		else
			info "LUX will set <LUX_PREFIX> and install to [ $LUX_PREFIX/lib/luxor ]\n"
		fi

		fx_vars;
		create_dirs;

		if [ -d "$LUX_ETC" ]; then
			LUX_CONF_FILE="$LUX_ETC/luxor.conf"
			rc_make "$LUX_CONF_FILE"
		else
			err="Cannot generate rc file!"
		fi

		if [ -f "$LUX_CONF_FILE" ]; then
			profile_link "$LUX_CONF_FILE"
			rc_dump "$LUX_CONF_FILE"
		else
			err="Cannot link rcfile"
		fi

		if fx_download "$FX_SETUP_URL" "$LUX_BIN/fx-setup"; then
			info "FX-SETUP installed to $LUX_BIN"
		else
			err="Cannot download fx-setup, try again!"
		fi

		if fx_download "$FX_UTIL_URL" "$LUX_BIN/fx"; then
			info "FX-UTIL installed to $LUX_BIN"
		else
			err="Cannot download fx-util, try again!"
		fi

		[ ! -z "$err" ] && die "$err" || { info "Refresh shell to load LUX vars";
			return 0; }

	}



	function api_clean(){
		local force=${1:-1};
		if [ $opt_clean -eq 0 -o $opt_nuke -eq 0 -o $force -eq 0 ]; then
			info "Cleaning..."
			profile_unlink $LUX_CONF_FILE;
			[ -f $LUX_CONF_FILE ] && rm $LUX_CONF_FILE || :;
			[ -f "$LUX_CONF_FILE" ] && die "Unable to delete conf file for cleanup" || :
			[ $force -eq 0 ] && fx_unset 0 || fx_unset
		else
			printf "Didnt clean $opt_clean"
		fi
		return 0
	}


	function api_nuke(){
		local force=${1:-1};
		if [ $opt_nuke -eq 0 -o $force -eq 0 ]; then
			fx_vars;
			if [ -n $LUX_PREFIX -a -d $LUX_PREFIX ]; then
				LUX_DIRS=($LUX_LIB $LUX_BIN $LUX_ETC);
				nuke_dirs
			fi
			api_clean 0
		fi
		fx_dump
		return 0
	}




#-------------------------------------------------------------------------------
# FX Main
#-------------------------------------------------------------------------------

	function main(){
		local call ret
		for call in "${@}"; do
			case $call in
				inst*)     api_install;   ret=$?;;
				unins*)    api_uninstall; ret=$?;;
				dl)				 fx_vars; fx_download; ret=$?;;
				*)
					if [ ! -z "$call" ]; then
						die "Invalid command $call";
						ret 1;
					fi
				;;
			esac
		done
		#fx_dump
		return $ret
	}

#-------------------------------------------------------------------------------
# FX Driver
#-------------------------------------------------------------------------------


	if [ "$0" = "-bash" ]; then
		:
	else
		orig_args=("${@}")
		api_options "${orig_args[@]}"
		args=( "${orig_args[@]/\-*}" ); #delete anything that looks like an option
		main "${args[@]}";ret=$?
	fi











